// bobs-flipping-sequence.yml
#include "bits/stdc++.h"
using namespace std;

// Defines
#define fs first
#define sn second
#define pb push_back
#define eb emplace_back
#define mpr make_pair
#define mtp make_tuple
#define all(x) (x).begin(), (x).end()
// Basic type definitions
using ll = long long; using ull = unsigned long long; using ld = long double;
using pii = pair<int, int>; using pll = pair<long long, long long>;
// PBDS order statistic tree
#include <ext/pb_ds/assoc_container.hpp> // Common file 
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds; 
template <typename T, class comp = less<T>> using os_tree = tree<T, null_type, comp, rb_tree_tag, tree_order_statistics_node_update>;
template <typename K, typename V, class comp = less<K>> using treemap = tree<K, V, comp, rb_tree_tag, tree_order_statistics_node_update>;
// HashSet
#include <ext/pb_ds/assoc_container.hpp>
using namespace __gnu_pbds;
const ll RANDOM = chrono::high_resolution_clock::now().time_since_epoch().count();
struct chash { ll operator()(ll x) const { return x ^ RANDOM; } };
template <typename T, class Hash> using hashset = gp_hash_table<T, null_type, Hash>;
template <typename K, typename V, class Hash> using hashmap = gp_hash_table<K, V, Hash>;
// More utilities
int SZ(string &v) { return v.length(); }
template <typename C> int SZ(C &v) { return v.size(); }
template <typename T, typename U> void maxa(T &a, U b) { a = max(a, b); }
template <typename T, typename U> void mina(T &a, U b) { a = min(a, b); }
const ll INF = 0x3f3f3f3f, LLINF = 0x3f3f3f3f3f3f3f3f;

const int MN = 2e6 + 1;
int N, K, Q;
bool val[MN];

int l = 0, r = 0, dq[MN];
void reset() { l = r = 0; }
int sz() { return r - l; }
void push(int x) { dq[r++] = x; }
int front() { return dq[l]; }
int pop() { return dq[l++]; }

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    
    cin >> (N) >> (K) >> (Q);
    string tmp;
    cin >> tmp;
    for (auto i = 0; i < N; i++)
        val[i] = tmp[i] == '1';

    while (Q--) {
        int l, r;
        cin >> l >> r;
        l--; r--;

        reset();
        int ans = 0;
        bool good = true;
        for (auto i = r; i >= l; i--) {
            while (sz() && front() > i) pop();
            bool b = val[i] ^ (sz() & 1);
            // cout<<"l="<<(l)<<", "; cout<<"r="<<(r)<<", "; cout<<"i="<<(i)<<", "; cout<<"val[i]="<<(val[i])<<", "; cout<<"b="<<(b)<<", "; cout << "pre=["; for (auto x:pre)cout<<x<<", "; cout<<"], "; cout << endl; // db l,r,i,val[i],b,I:pre
            if (b) {
                if (i < l + K - 1) {
                    good = false;
                    break;
                }
                else {
                    push(i - K + 1);
                    ans++;
                }
            }
        }

        cout << (good ? ans : -1) << '\n';
    }

    return 0;
}

